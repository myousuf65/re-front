/*
 * Copyright 2024, Alibaba Group.
 * Copyrights licensed under the BSD License.
 * See the accompanying LICENSE file for terms.
 */

import React from 'react';
import IntlMessageFormat from 'intl-messageformat';
import escapeHtml from 'escape-html';
import cookie from 'cookie';
import invariant from 'invariant';
import merge from 'lodash.merge';

/**
 * Currency code list
 * https://www.currency-iso.org/en/home/tables/table-a1.html
 */
var currency = ["AFN", "EUR", "ALL", "DZD", "USD", "AOA", "XCD", "ARS", "AMD", "AWG", "AUD", "AZN", "BSD", "BHD", "BDT", "BBD", "BYN", "BZD", "XOF", "BMD", "INR", "BTN", "BOB", "BOV", "BAM", "BWP", "NOK", "BRL", "BND", "BGN", "BIF", "CVE", "KHR", "XAF", "CAD", "KYD", "CLP", "CLF", "CNY", "COP", "COU", "KMF", "CDF", "NZD", "CRC", "HRK", "CUP", "CUC", "ANG", "CZK", "DKK", "DJF", "DOP", "EGP", "SVC", "ERN", "ETB", "FKP", "FJD", "XPF", "GMD", "GEL", "GHS", "GIP", "GTQ", "GBP", "GNF", "GYD", "HTG", "HNL", "HKD", "HUF", "ISK", "IDR", "XDR", "IRR", "IQD", "ILS", "JMD", "JPY", "JOD", "KZT", "KES", "KPW", "KRW", "KWD", "KGS", "LAK", "LBP", "LSL", "ZAR", "LRD", "LYD", "CHF", "MOP", "MKD", "MGA", "MWK", "MYR", "MVR", "MRO", "MUR", "XUA", "MXN", "MXV", "MDL", "MNT", "MAD", "MZN", "MMK", "NAD", "NPR", "NIO", "NGN", "OMR", "PKR", "PAB", "PGK", "PYG", "PEN", "PHP", "PLN", "QAR", "RON", "RUB", "RWF", "SHP", "WST", "STD", "SAR", "RSD", "SCR", "SLL", "SGD", "XSU", "SBD", "SOS", "SSP", "LKR", "SDG", "SRD", "SZL", "SEK", "CHE", "CHW", "SYP", "TWD", "TJS", "TZS", "THB", "TOP", "TTD", "TND", "TRY", "TMT", "UGX", "UAH", "AED", "USN", "UYU", "UYI", "UZS", "VUV", "VEF", "VND", "YER", "ZMW", "ZWL", "XBA", "XBB", "XBC", "XBD", "XTS", "XXX", "XAU", "XPD", "XPT", "XAG"];

var numberFormat = {};

for (var i = 0; i < currency.length; i++) {
  numberFormat[currency[i]] = {
    style: 'currency',
    currency: currency[i]
  };
}

var defaultFormats = {
  number: numberFormat
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

String.prototype.defaultMessage = String.prototype.d = function (msg) {
  return this || msg || "";
};

var ReactIntlUniversal = function () {
  function ReactIntlUniversal() {
    classCallCheck(this, ReactIntlUniversal);

    this.options = {
      currentLocale: null, // Current locale such as 'en-US'
      locales: {}, // app locale data like {"en-US":{"key1":"value1"},"zh-CN":{"key1":"值1"}}
      warningHandler: function warn() {
        var _console;

        (_console = console).warn.apply(_console, arguments);
      }, // ability to accumulate missing messages using third party services
      escapeHtml: true, // disable escape html in variable mode
      fallbackLocale: null, // Locale to use if a key is not found in the current locale
      debug: false, // If debugger mode is on, the message will be wrapped by a span
      dataKey: 'data-i18n-key' // If debugger mode is on, the message will be wrapped by a span with this data key
    };
  }

  /**
   * Get the formatted message by key
   * @param {string} key The string representing key in locale data file
   * @param {Object} variables Variables in message
   * @returns {string} message
   */


  createClass(ReactIntlUniversal, [{
    key: "_getFormattedMessage",
    value: function _getFormattedMessage(key, variables) {
      if (this.options.intlGetHook) {
        try {
          this.options.intlGetHook(key, this.options.currentLocale);
        } catch (e) {
          console.log('intl get hook error: ', e);
        }
      }
      invariant(key, "key is required");
      var _options = this.options,
          locales = _options.locales,
          currentLocale = _options.currentLocale,
          formats = _options.formats;

      // 1. check if the locale data and key exists

      if (!locales || !locales[currentLocale]) {
        var errorMsg = "react-intl-universal locales data \"" + currentLocale + "\" not exists.";
        if (!currentLocale) {
          errorMsg += ' More info: https://github.com/alibaba/react-intl-universal/issues/144#issuecomment-1345193138';
        }
        this.options.warningHandler(errorMsg);
        return "";
      }
      var msg = this.getDescendantProp(locales[currentLocale], key);
      if (msg == null) {
        if (this.options.fallbackLocale) {
          msg = this.getDescendantProp(locales[this.options.fallbackLocale], key);
          if (msg == null) {
            this.options.warningHandler("react-intl-universal key \"" + key + "\" not defined in " + currentLocale + " or the fallback locale, " + this.options.fallbackLocale);
            return "";
          }
        } else {
          this.options.warningHandler("react-intl-universal key \"" + key + "\" not defined in " + currentLocale);
          return "";
        }
      }

      // 2. handle security issue for variables
      if (variables) {
        variables = Object.assign({}, variables);
        // HTML message with variables. Escape it to avoid XSS attack.
        for (var i in variables) {
          var value = variables[i];
          if (this.options.escapeHtml === true && (typeof value === "string" || value instanceof String) && value.indexOf("<") >= 0) {
            value = escapeHtml(value);
          }
          variables[i] = value;
        }
      }

      // 3. resolve variables
      try {
        var finalMsg = void 0;
        if (variables) {
          // format message with variables
          var msgFormatter = new IntlMessageFormat(msg, currentLocale, formats);
          finalMsg = msgFormatter.format(variables);
        } else {
          // no variables, just return the message
          finalMsg = msg;
        }
        return finalMsg;
      } catch (err) {
        this.options.warningHandler("react-intl-universal format message failed for key='" + key + "'.", err.message);
        return msg;
      }
    }

    /**
     * Get the formatted message by key
     * @param {string} key The string representing key in locale data file
     * @param {Object} [variables] Variables in message
     * @returns {string} message
     */

  }, {
    key: "get",
    value: function get$$1(key, variables) {
      var msg = this._getFormattedMessage(key, variables);
      return this.options.debug ? this._getSpanElementMessage(key, msg) : msg;
    }

    /**
     * Get the formatted html message by key.
     * @param {string} key The string representing key in locale data file
     * @param {Object} [variables] Variables in message
     * @returns {React.ReactElement} html message
    */

  }, {
    key: "getHTML",
    value: function getHTML(key, variables) {
      var msg = this._getFormattedMessage(key, variables);
      if (msg) {
        return this._getSpanElementMessage(key, msg);
      }
      return "";
    }

    /**
     * As same as get(...) API
     * @param {Object} options
     * @param {string} options.id
     * @param {string} options.defaultMessage
     * @param {Object} variables Variables in message
     * @returns {string} message
    */

  }, {
    key: "formatMessage",
    value: function formatMessage(messageDescriptor, variables) {
      var id = messageDescriptor.id,
          defaultMessage = messageDescriptor.defaultMessage;

      return this.get(id, variables).defaultMessage(defaultMessage);
    }

    /**
     * As same as getHTML(...) API
     * @param {Object} options
     * @param {string} options.id
     * @param {React.Element} options.defaultMessage
     * @param {Object} variables Variables in message
     * @returns {React.Element} message
    */

  }, {
    key: "formatHTMLMessage",
    value: function formatHTMLMessage(messageDescriptor, variables) {
      var id = messageDescriptor.id,
          defaultMessage = messageDescriptor.defaultMessage;

      return this.getHTML(id, variables).defaultMessage(defaultMessage);
    }

    /**
     * Helper: determine user's locale via URL, cookie, localStorage, and browser's language.
     * You may not need this API, if you have other rules to determine user's locale.
     * @param {string} options.urlLocaleKey URL's query Key to determine locale. Example: if URL=http://localhost?lang=en-US, then set it 'lang'
     * @param {string} options.cookieLocaleKey Cookie's Key to determine locale. Example: if cookie=lang:en-US, then set it 'lang'
     * @param {string} options.localStorageLocaleKey LocalStorage's Key to determine locale such as 'lang'
     * @returns {string} determined locale such as 'en-US'
     */

  }, {
    key: "determineLocale",
    value: function determineLocale() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.getLocaleFromURL(options) || this.getLocaleFromCookie(options) || this.getLocaleFromLocalStorage(options) || this.getLocaleFromBrowser();
    }

    /**
     * Initialize properties and load CLDR locale data according to currentLocale
     * @param {Object} options
     * @param {string} options.currentLocale Current locale such as 'en-US'
     * @param {any} options.locales App locale data like {"en-US":{"key1":"value1"},"zh-CN":{"key1":"值1"}}
     * @param {boolean} [options.debug] debug mode
     * @returns {Promise}
     */

  }, {
    key: "init",
    value: function init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      invariant(options.currentLocale, "options.currentLocale is required");
      invariant(options.locales, "options.locales is required");

      Object.assign(this.options, options);

      this.options.formats = Object.assign({}, this.options.formats, defaultFormats);

      return new Promise(function (resolve, reject) {
        // init() will not load external common locale data anymore.
        // But, it still return a Promise for backward compatibility.
        resolve();
      });
    }

    /**
     * Get the inital options
     */

  }, {
    key: "getInitOptions",
    value: function getInitOptions() {
      return this.options;
    }

    /**
     * Load more locales after init
     */

  }, {
    key: "load",
    value: function load(locales) {
      merge(this.options.locales, locales);
    }
  }, {
    key: "getLocaleFromCookie",
    value: function getLocaleFromCookie(options) {
      var cookieLocaleKey = options.cookieLocaleKey;

      if (cookieLocaleKey) {
        var params = cookie.parse(document.cookie);
        return params && params[cookieLocaleKey];
      }
    }
  }, {
    key: "getLocaleFromLocalStorage",
    value: function getLocaleFromLocalStorage(options) {
      var localStorageLocaleKey = options.localStorageLocaleKey;

      if (localStorageLocaleKey && window.localStorage) {
        return localStorage.getItem(localStorageLocaleKey);
      }
    }
  }, {
    key: "getLocaleFromURL",
    value: function getLocaleFromURL(options) {
      var urlLocaleKey = options.urlLocaleKey;

      if (urlLocaleKey) {
        var query = location.search.split("?");
        if (query.length >= 2) {
          var params = new URLSearchParams(query[1]);
          if (params.has(urlLocaleKey)) {
            return params.get(urlLocaleKey);
          }
        }
      }
    }
  }, {
    key: "getDescendantProp",
    value: function getDescendantProp(locale, key) {

      if (locale[key]) {
        return locale[key];
      }

      var msg = key.split(".").reduce(function (a, b) {
        return a != undefined ? a[b] : a;
      }, locale);

      return msg;
    }
  }, {
    key: "getLocaleFromBrowser",
    value: function getLocaleFromBrowser() {
      return navigator.language || navigator.userLanguage;
    }
  }, {
    key: "_getSpanElementMessage",
    value: function _getSpanElementMessage(key, msg) {
      var options = {
        dangerouslySetInnerHTML: {
          __html: msg
        }
      };
      if (this.options.debug) {
        options[this.options.dataKey] = key;
      }
      var el = React.createElement('span', options);
      // when key exists, it should still return element if there's defaultMessage() after getHTML()
      var defaultMessage = function defaultMessage() {
        return el;
      };
      return Object.assign({ defaultMessage: defaultMessage, d: defaultMessage }, el);
    }
  }]);
  return ReactIntlUniversal;
}();

var defaultInstance = new ReactIntlUniversal();
// resolved by CommonJS module loader
defaultInstance.ReactIntlUniversal = ReactIntlUniversal;
// react pattern: https://github.com/facebook/react/blob/main/packages/react/src/React.js
var get = defaultInstance.get.bind(defaultInstance);
var getHTML = defaultInstance.getHTML.bind(defaultInstance);
var formatMessage = defaultInstance.formatMessage.bind(defaultInstance);
var formatHTMLMessage = defaultInstance.formatHTMLMessage.bind(defaultInstance);
var determineLocale = defaultInstance.determineLocale.bind(defaultInstance);
var init = defaultInstance.init.bind(defaultInstance);
var getInitOptions = defaultInstance.getInitOptions.bind(defaultInstance);
var load = defaultInstance.load.bind(defaultInstance);
var getLocaleFromCookie = defaultInstance.getLocaleFromCookie.bind(defaultInstance);
var getLocaleFromLocalStorage = defaultInstance.getLocaleFromLocalStorage.bind(defaultInstance);
var getLocaleFromURL = defaultInstance.getLocaleFromURL.bind(defaultInstance);
var getDescendantProp = defaultInstance.getDescendantProp.bind(defaultInstance);
var getLocaleFromBrowser = defaultInstance.getLocaleFromBrowser.bind(defaultInstance);

export { ReactIntlUniversal, get, getHTML, formatMessage, formatHTMLMessage, determineLocale, init, getInitOptions, load, getLocaleFromCookie, getLocaleFromLocalStorage, getLocaleFromURL, getDescendantProp, getLocaleFromBrowser };export default defaultInstance;
